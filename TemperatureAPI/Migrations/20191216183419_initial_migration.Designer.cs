// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TemperatureAPI;

namespace TemperatureAPI.Migrations
{
    [DbContext(typeof(SmartHouseDBContext))]
    [Migration("20191216183419_initial_migration")]
    partial class initial_migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Temperatures.TemperatureSensors", b =>
                {
                    b.Property<Guid>("TemperatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("IndorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("OutdorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("SensorGulvReturTankTemp")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("SensorGulvTurTankTemp")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("SensorTankTemp")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("SensorTankTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SensorVpReturTemp")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("SensorVpTurTemp")
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("TemperatureId");

                    b.ToTable("temperatures");

                    b.HasData(
                        new
                        {
                            TemperatureId = new Guid("eb72a0ae-2f25-4806-841e-4425c8c30efd"),
                            IndorTemperature = 22.5m,
                            OutdorTemperature = -3.6m,
                            SensorGulvReturTankTemp = 34.3m,
                            SensorGulvTurTankTemp = 37.4m,
                            SensorTankTemp = 37.3m,
                            SensorTankTimeStamp = new DateTime(2019, 12, 16, 19, 34, 19, 589, DateTimeKind.Local).AddTicks(7258),
                            SensorVpReturTemp = 37.2m,
                            SensorVpTurTemp = 40.1m
                        },
                        new
                        {
                            TemperatureId = new Guid("d71a95ed-6683-48a0-b241-d29803210fe2"),
                            IndorTemperature = 22.6m,
                            OutdorTemperature = -3.7m,
                            SensorGulvReturTankTemp = 34.4m,
                            SensorGulvTurTankTemp = 38.5m,
                            SensorTankTemp = 38.1m,
                            SensorTankTimeStamp = new DateTime(2019, 12, 16, 19, 34, 19, 592, DateTimeKind.Local).AddTicks(816),
                            SensorVpReturTemp = 38.3m,
                            SensorVpTurTemp = 41.2m
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
